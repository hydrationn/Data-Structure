1. 트리(Tree)
 나무를 거꾸로 세워 놓은 형태의 자료구조
- 루트(root): 트리의 최상위에 있는 노드
- 부모(parent): 노드의 상위에 연결된 노드
- 자식(child): 노드의 하위에 연결된 노드
- 잎(leaf): 자식이 없는 노드

2. 서로소 집합은 위한 트리 연산
- 서로소 집합: 어느 잡합도 공통 원소가 없는 두 집합

(1) Union: 2개의 집합을 하나의 집합으로 만드는 연산
- Union by Rank: 특정 노드를 루트 노드로 했을 때 트리 깊이를 기반으로 Union을 수행
- Union by size: 특정 노드가 가지는 자식 노드의 수를 기반으로 Union을 수행

(2) Find: x 원소가 속한 집합의 루트를 찾는 연산


>>>>> 과제: disjoint set 찾기
 참고 코드의 Node와 UnionFind 클래스를 수정하여 이용한다.

(1) 입력 파일
- 첫 줄에는 정수 n이 있음 : 집합의 원소가 0,1,2,..., n-1임을 의미
- 다음, 크기가 ( i, j ) 입력 쌍들이 주어진다.
    ( i, j )은 i와 원소 j가 같은 집합에 있음을 의미한다.

(2) 메소드 수정 및 추가:
- 수정 : rank가 아닌 size(트리의 노드 수)를 기반하여 union 메소드로 수정하시오.
- 추가 : 삽입된 모든 서로소 집합을 프린트하는 메소드 printsets()를 추가하시오.

(3) Main 실행 및 출력:
- 입력 파일에 있는 같은 집합인 두 원소를 union() 수행
- printsets() 호출하여 모든 서로소 집합을 프린트한다.


>> input          >> output
10                [disjoint sets]
2 1               0 4 5 9
2 6               1 2 3 6 7 8
7 3
4 5
9 5
7 2
7 8
0 4

>> input          >> output
4                 0 1
0 1               2
                  3

