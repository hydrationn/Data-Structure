1. Queue
 선입선출(FIFO) 방식으로 데이터를 저장하는 자료구조
(1) FIFO(First In First Out): 제일 처음에 들어온 데이터가 가장 먼저 제거
(2) 한 쪽에서는 데이터가 추가되고 한 쪽에서는 데이터가 삭제되는 구조
- 삽입(enqueue, insert)이 일어나는 곳을 Rear
- 삭제(dequeue, delete)가 일어나는 곳을 Front

2. Circular Queue
- 선형 큐와 다르게 Rear의 다음이 Front를 가리키는 방식
- 원형 큐는 삽입과 삭제를 할 때 시간 복잡도 O(1)가 소요된다.


>> 과제
1. 교재의 Queue를 참고하여 Circular Singly linked Queue를 구현하시오
(1) 초기화: 더미 노드를 생성하지 않고 rear만을 초기화하고 사용한다.
(2) 이후 슬라이드에서 보충 설명 [ 참고 코드– CQueue ]

2. 주어진 입력 시퀀스에 따라 아래 메소드가 호출되도록 구현하시오
(1) insert(x) 메소드
 “i” 토큰의 경우, “d” 토큰을 만나기 전까지의 값들을 원형 큐에 새로운 데이터를 추가한다.
(2) delete() 메소드
- “d” 토큰의 경우, 원형 큐에 가장 먼저 삽입된 노드를 삭제하고 출력한다.
- 단, 큐가 비어 있으면 empty를 출력한다.

=> insert()와 delete()는 O(1), 상수 시간이 소요되어야 하며, 그 이유를 보고서에 상세하게 작성한다.
 insert()와 delete() 모두 rear를 업데이트하고 고정된 단계를 수행한다. 따라서 각각의 작업이 상수 시간 O(1) 시간 복잡도를 가지기 때문에 전제 시간 복잡도는 O(1)이 된다. 이는
원형 큐의 주요 장점 중 하나로, 큐의 크기에 관계없이 빠른 연산 속도를 보장한다.