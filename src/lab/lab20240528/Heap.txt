1. Heap
 완전 이진 트리 기반의 부모 노드 우선순위가 자식 노드 우선순위보다 높은 자료구조
- 완전 이진트리는 1차원 배열로 구현
- 배열의 2번째 원소부터 사용

(1) 최소 힙(Minimum Heap): key가 작을수록 높은 우선순위
(2) 최대 힙(Maximum Heap): key가 클수록 더 높은 우선순위

2. Minimum Heap
- 최소 힙, key가 작을수록 우선순위가 높다.
- 각 노드의 값을 그 자식 노드의 값보다 작거나 같다.
- 루트 노드가 가장 작은 값을 가진다.
- 따라서 값이 작은 데이터가 우선적으로 제거된다.

3. Maximum Heap
- 최대 힙, key가 클수록 우선순위가 높다.
- 각 노드의 값은 그 자식 노드의 값보다 크거나 같다.
- 루트 노드가 가장 큰 값을 가진다.
- 따라서 값이 큰 데이터가 우선적으로 제거된다.


>>>>> 과제
» 교재의 힙 클래스를 구현하고 Max 힙과 Min 힙을 사용하여 다음을 수행하시오.

» 실행 과정 :
 1. 입력된 정수들의 시퀀스를 차례대로 입력한다.
 2. 중앙값을 찾아 출력한다.
    • 홀수 개일 경우, 한가운데 값을 출력한다.
    • 짝수 개일 경우, 한가운데 두 개 값 중에서 작은 값을 출력한다.
› 단, 입력된 값을 정렬한 후 중앙값을 찾는 방법 사용 X
› 또한 입력된 정수들은 중복된 값을 가지지 않는다.

» 구현 메소드 :
› deleteRoot() : 힙의 루트를 삭제하는 메소드
› insert() : 힙에 새로운 값을 추가하는 메소드
› swap() : 노드 간 위치를 바꿔주는 메소드
› size() : 힙에 삽입된 원소 개수를 알려주는 메소드

» 메소드 수정 :
› upheap(): 주로 insert 메소드를 수행하고 최소, 최대 힙일때를 구분하여 루트 방향으로 올라가면서 부모의 키와 비교하여 힙 속성이 만족될 때까지 노드를 교환하는 메소드
› downheap() : delete 메소드를 수행하고 최소, 최대 힙일때를 구분하여 루트로부터 자식 중에서 작은 값을 가진 자식과 키를 비교하여 힙 속성이 만족될 때까지 노드를 교환하는 메소드

» 메소드 추가 :
› peekRoot () : 힙의 최상단 원소에 접근하는 메소드


>> input                    >> output
1 5 2 10 -99 7              2
4 5 9 2 1                   4
100 10 8 6 4 2 1 0          4

