1. Binary Search Tree
- 이진 트리의 한 종류
- 각 노드의 왼쪽 자식은 자신보다 작은 값을, 오른쪽 자식은 자신보다 큰 값을 가진다.
- 효율적인 검색, 삽입, 삭제 작업을 보장한다.
- 중위 순회를 통해 데이터의 오름차순 출력이 가능하다.

>>>>> 과제
» 교재의 Binary Search Tree를 구현한 클래스를 기반으로 다음을 수행하도록 수정하고 테스트하시오.

» 실행 과정 :
1. 입력 파일의 첫 번째 줄에 있는 key들을 put_mod()를 이용하여 차례대로 binary search tree에 삽입한 후 inorder()를 통해 key들을 출력
2. deletemax()를 호출하여 트리에서 최대 값을 삭제한 후 inorder()를 통해 key들을 출력
3. 입력 파일의 두 번째 줄에 있는 key k들을 차례대로 입력 받아 delete_mod()를 이용하여 삭제한 후 inorder()를 통해 key들을 출력

› 단, 교재에 있는 delete(), put(), deleteMin(), Min()은 사용하지 않는다.

» 메소드 추가
› deletemax() : 트리에서 최대 값을 삭제하는 메소드

» 메소드 수정
› delete_mod(): 왼쪽 서브 트리에서 최대값을 가지는 노드를 이용해 삭제를 수행하는 메소드
› put_mod(): 비재귀적으로 트리에 key들을 삽입하는 메소드


>> input               >> output
4 2 7 1 9 3 5          1 2 3 4 5 7 9
1 5 4                  1 2 3 4 5 7
8 7 6 5 4 3 2 1        2 3 7
6 7 3                  1 2 3 4 5 6 7 8
4 2 7 1 9 3 5          1 2 3 4 5 6 7
10                     1 2 4 5
                       1 2 3 4 5 7 9
                       1 2 3 4 5 7
                       1 2 3 4 5 7

