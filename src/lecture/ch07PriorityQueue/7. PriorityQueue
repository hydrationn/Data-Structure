7. Priority Queue
 가장 높은 우선순위를 가진 항목에 접근과 삭제, 임의의 우선순위를 가진 항목의 삽입을 지원하는 자료구조

1. 힙(Heap)
 완전 이진 트리로서 부모의 우선순위가 자식의 우선순위보다 높은 자료구조
    - 최소 힙(Minimum Heap): 키가 작을수록 높은 우선순위
    - 최대 힙(Maximum Heap): 키가 클수록 더 높은 우선순위

2. 완전 이진 트리와 배열
(1) 완전 이진 트리는 1차원 배열로 구현, 배열의 2번째 원소부터 사용. 배열 a에서 a[0]은 사용하지 않는다.
(2) 완전 이진 트리의 노드를 레벨 순회(Level-order Traversal) 순서에 따라 a[1]부터 차례로 저장
(3) 완전 이진트리의 노드가 저장된 배열
- a[i]의 자식은 a[2i]와 a[a2i+1]
- a[j]의 부모는 a[j/2]. 단, j>1이고, j/2의 정수만

3. 최솟값 접근
 최소 힙의 루트에는 항상 가장 작은(min) 키가 있다.
- 부모에 저장된 키가 자식의 키보다 작다는 규칙 때문
- 루트는 a[i]에 있으므로, O(1) 시간에 min 키를 가진 노드 접근

4. 최솟값 삭제(delete_min)
 루트의 키를 삭제
(1) 힙의 가장 마지막 노드, 즉, 배열의 가장 마지막 항목을 루트로 이동
(2) 힙의 크기를 1 감소시킨다.
(3) 루트로부터 자식 중에서 작은 값을 가진 자식 (두 자식 사이의 승자)과 키를 비교하여 힙 속성이 만족될 때까지 키를 교환하며 이파리 방향으로 진행

-> (3) 과정은 루트로부터 아래로 내려가면 진행되므로 downheap이라 부르자.

5. 삽입 연산(insert)
(1) 힙의 마지막 노드(즉, 배열의 마지막 항목)의 바로 다음 empty 원소에 새로운 항목을 저장
(2) 루트 방향으로 올라가면서 부모의 키와 비교하여 힙 속성이 만족될 때까지 노드를 교환

-> (2)의 과정은 이파리로부터 위로 올라가며 진행되므로 upheap이라 부르자.

6. 상향식 힙 만들기(Bottom-up Heap Construction)
 [ 핵심 아이디어 ]
 - 상향식(Bottom-up) 방식으로 각 노드에 대해 힙 속성을 만족하도록 부모와 자식을 서로 교환
 - n개의 항목이 배열에 임의의 순서로 저장되어 있을 때, 힙을 만들기 위해선 a[n/2]부터 a[1]까지 차례로 downheap을 각각 수행하여 힙 속성을 충족시킨다.

7. 상향식 힙 만들기의 수행 시간 분석
- 노드 수가 n인 힙의 각 층에 있는 노드 수를 살펴보자. 단, 간단한 계산을 위하여 n = 2^k - 1로 가정, k는 양의 상수
- 최하위 층(i=0)의 노드 수 = (n+1)/2
- (i=1)의 노드 수 = (n+1) / 2^2
- (i=2)의 노드 수 = (n+1) / 2^3
    ..
- 최상층의 노드 수 = 1
- 힙 만들기는 i=1인 경우부터 시작하여 최상위 층의 루트까지 각 노드에 대해 downheap을 수행

8. 수행 시간
(1) Insert 연산을 위한 upheap은 삽입된 노드나 키값이 감소된 노드로부터 최대 루트까지 올라가며 부모와 자식 노드를 교환
(2) delete_min 연산에서는 힙의 마지막 노드를 루트로 이동한 후, downheap을 최하위 층의 노드까지 교환해야 하는 경우가 발생
(3) 각 연산의 수행 시간: 힙의 높이에 비례
(4) 힙은 완전 이진 트리이므로 힙에 n개의 노드가 있으면 그 높이는 ⌈log(n+1)⌉
(5) 따라서 힙의 각 연산 수행 시간은 O(log n)
