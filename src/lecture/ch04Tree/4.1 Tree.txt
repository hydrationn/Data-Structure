4.1 Tree
- 일반적인 트리()는 트리를 거꾸로 세워놓은 형태의 자료구조
- HTML과 XML의 문서 트리, 자바 클래스 계층구조, 운영체제의 파일시스템, 탐색트리, 이항() 힙, 피보나치() 힙과 같은 우선순위 큐

* 트리는 empty이거나, empty가 아니면 루트 R과 트리의 집합으로 구성되는데 각 트리의 루트는 R의 자식 노드이다. 단, 트리의 집합은 공집합일 수도 있다.

1. 용어
(1) 루트(Root): 트리의 최상위에 있는 노드
(2) 자식(Child): 노드 하위에 연결된 노드
(3) 차수(Degree): 자식 수
(4) 부모(Parent): 노드의 상위에 연결된 노드
(5) 이파리(Leaf): 자식이 없는 노드
(6) 형제(Sibling): 동일한 부모를 가지는 노드
(7) 조상(Ancestor): 루트까지의 경로상에 있는 모든 노드
(8) 후손(Descendant): 노드 아래로 매달린 모든 노드들의 집합
(9) 서브트리(Subtree): 노드 자신과 후손으로 구성된 트리
(10) 레벨(Level): 루트는 레벨 1, 아래 층으로 내려가며 레벨 1씩 증가
(11)   -> 레벨은 깊이(Depth)와 동일
(12) 높이(Height): 트리의 최대 레벨
(13) 키(Key): 탐색에 사용되는 노드에 저장된 정보
(14) 이파리: 단말(Terminal) 노드 또는 외부(External) 노드
(15) 내부(Internal) 노드 또는 비단말(Non-Terminal) 노드: 이파리가 아닌 노드
(16) 일반적인 트리를 메모리에 저장하려면 각 노드에 키와 자식 수 만큼의 레퍼런스 저장 필요
- 노드의 최대 차수가 k라면, k개의 레퍼런스 필드 필요
(17) n개의 노드가 있는 최대 차수가 k인 트리
        null 레퍼런스 수 = nk-(n-1) = n(k-1)+1
- nk = 총 레퍼런스 수
- (n-1) = 트리에서 부모 -> 자식을 연결하는 레퍼런스 수
(18)) k가 클수록 메모리의 낭비가 심해지고 트리를 탐색하는 과정에서 null 레퍼런스를 확인해야 하므로 매우 비효율적

2. 왼쪽 자식-오른쪽 형제(Left Child-Right Sibling) 표현
 노드의 왼쪽 자식과 오른쪽 형제를 가리키는 2개의 레퍼런스만 이용
