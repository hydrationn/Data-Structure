4.2 Binary Tree
: 각 노드의 자식 수가 2 이하인 트리
- 컴퓨터 분야에서 널리 활용되는 기본적인 자료구조
- 데이터의 구조적인 관계를 잘 반영
- 효율적인 삽입과 탐색 가능
- 이진 트리에 대한 용어는 일반적인 트리에 대한 용어와 동일

* 이진 트리는 empty이거나, empty가 아니면, 루트와 2개의 이진 트리인 왼쪽 서브트리와 오른쪽 서브트리로 구성된다.

1. 특별한 형태의 이진 트리
(1) 포화 이진 트리(Perfect Binary Tree)
: 각 내부 노드가 2개의 자식을 가지고 모든 이파리가 같은 층에 있는 트리
(2) 완전 이진 트리(Complete Binary Tree)
: 마지막 레벨을 제외한 각 레벨이 노드들로 꽉 차있고, 마지막 레벨에는 노드들이 왼쪽부터 빠짐없이 채워진 트리
 - 포화 이진 트리는 완전 이진 트리이다.

2. 이진 트리의 속성
(1) 레벨 k에 있는 최대 노드 수 = 2^k, k = 1, 2, 3, ..
(2) 높이가 h인 포화 이진 트리에 있는 노드 수 = 2^h - 1
(3) 높이가 h인 완전 이진 트리에 존재할 수 있는 노드 수 n
    2^(h-1) <= n <= 2^h - 1
(4) n개의 노드를 가진 완전 이진 트리의 높이 = ceil(log2(n+1))
(5) 배열에 저장하면 노드의 부모와 자식이 배열의 어디에 저장되어 있는지를 쉽게 알 수 있다. 단, 트리의 노드 수는 n.
 - a[i]의 부모는 a[i/2]. 단, i > 1.
 - a[i]의 왼쪽 자식은 a[2i]. 단, 2i <= n.
 - a[i]의 오른쪽 자식은 a[2i+1]. 단, 2i + 1 <= n.

3. 편향(Skewed) 이진 트리를 배열에 저장하는 경우, 트리의 높이가 커질수록 메모리 낭비가 심화된다.

4. 이진 트리의 노드: 키와 2개의 레퍼런스 필드(left, right)
 -> 키와 관련된 정보도 노드에 저장되나 생략

5. Comparable: java.lang에 선언된 인터페이스
            -> 객체의 하나의 멤버만을 기준으로 객체들을 비교(정렬)할 때 사용
    public interface Comparable<T> {
        public int CompareTo(T other);
    }
- x.compareTo(y)라 하면
    x < y이면 음수
    x = y이면 0
    x > y이면 양수 반환

- Comparable 인터페이스는 compareTo 메소드를 재정의하여 두 객체를 비교
- String, Date, Integer, Character, Double 등의 Wrapper 클래스에는 이미 Comparable 인터페이스가 구현되어 있음.
- Comparable 인터페이스는 일반적으로 다음과 같이 선언하여 사용
    public class 클래스이름 implements Comparable<클리스이름> {
        ...
        public int compareTo(클래스이름 other) {
        ...
        }
    }
