4.3 이진 트리의 연산
 이진 트리에서 수행되는 기본 연산들은 트리를 순회(Traversal)하며 이루어진다.

1. 이진 트리의 4가지 순회 바식
(1) 순회는 항상 트리의 루트부터 시작
(2) 트리를 순회하는 중에 노드를 방문하는 시점에 따라 구분
 모두 루트로부터 동일한 순서로 이진 트리의 노드들을 지나가는데, 특정 노드에 도착했을 때 그 노드를 방문할지, 아니면 지나치고 나중에 방문하는지에 따라 구분한다.
- 전위 순회(Preorder Traversal)
- 중위 순회(Inorder Traversal)
- 후위 순회(Postoder Traversal)
- 레벨 순회(Levelorder Traversal)

2. 전위 순회(Preorder Traversal)
: 노드 x에 도착했을 때 x를 방문
- 그 다음에 x의 왼쪽 자식으로 순회를 계속
- x의 왼쪽 서브트리의 모든 노드를 방문한 후에는 x의 오른쪽 서브트리의 모든 후손 노드 방문

* 복귀 = 메소드 호출이 완료 후 리턴
* 노드 방문 = 노드의 key 출력

3. 중위 순회(Inorder Traversal)
: 노드 x에 도착하면 x의 방문을 미루고 x의 서브트리로 순회를 진행
-> 왼쪽 서브트리의 모든 노드를 방문한 후에 x 방문
- x를 방문한 후에는 x의 오른쪽 서브트리를 같은 방식으로 방문

4. 후위 순회(Postoder Traversal)
: 노드 x에 도착하면 x의 방문을 보류하고 x의 왼쪽 서브트리로 순회를 진행
- x의 왼쪽 서브트리를 방문한 후에는 x의 오른쪽 서브트리를 같은 방식으로 방문
- 마지막에 x 방문

5. 레벨 순회(Levelorder Traversal)
: 루트가 있는 최상위 레벨부터 시작하여 레벨마다 좌에서 우로 노드를 방문

6. 기타 이진 트리 연산
(1) size(): 트리의 노드 수 계산
(2) height(): 트리의 높이 계산
(3) isEqual(): 2개의 이진 트리에 대한 동일성 검사

7. 트리의 노드 수
 [ 핵심 아이디어 ] 트리의 노드 수 = 1 + (루트의 왼쪽 서브트리에 있는 노드 수) + (루트의 오른쪽 서브트리에 있는 노드 수)
- 1은 루트 자신을 계산에 반영하는 것

8. 트리의 높이
 [ 핵심 아이디어 ] 트리의 높이 = 1 + max(루트의 왼쪽 서브트리의 높이, 루트의 오른쪽 서브트리의 높이)
- 루트 자신을 계산에 반영
- 왼쪽과 오른쪽 서브트리의 높이는 같은 방식으로 계산

9. 이진 트리 비교
 [ 핵심 아이디어 ] 전위 순회 과정에서 다른 점이 발견되는 순간 false를 리턴

10. 수행 시간
 앞서 설명된 각 연산은 트리의 각 노드를 한 번씩만 방문하므로 O(n) 시간이 소요

