5.3 2-3 Tree
- 2-3 트리는 내부 노드의 차수가 2 또는 3인 균형 탐색 트리
- 차수가 2인 노드 = 2-노드, 차수가 3인 노드 = 3-노드
- 2-노드: 1개의 키를 가지며, 3-노드는 2개의 키를 가진다.
- 2-3 트리는 루트로부터 각 이파리까지 경로의 길이가 같고, 모든 이파리가 같은 층에 있는 완전 균형 트리
- 2-3 트리가 2-노드들만으로 구성되면 포화 이진 트리와 동일한 형태를 갖는다.

 [ 핵심 아이디어 ] 2-3 트리는 모든 이파리가 같은 층에 있어야 하므로 트리가 위로 자라나거나 낮아진다.
 - 2-3 트리에서도 이진 탐새 ㄱ트리에서의 중위 순회와 유사한 방법으로 트리 순회
 - k1과 k2를 가진 3-노드에서는 먼저 노드의 왼쪽 서브 트리에 있는 모든 노드를 방문한 후에 k1을 방문하고, 이후에 중간 서브트리에 있는 모든 노드를 방문
 - 다음으로 k2를 방문하고 마지막으로 오른쪽 서브트리에 있는 모든 노드를 방문
 - 2-3 트리에서 중위 순회를 수행함녀 키들이 정렬된다.

1. 여러가지 연산
(1) 탐색 연산
 루트에서 시작하여 방문한 노드의 키들과 탐색하는 키를 비교하며 다음 레벨의 노드를 탐색

(2) 삽입 연산
- 먼저 탐색과 동일한 과정을 거쳐 새로운 키가 삽입되어야 할 이파리를 찾는다.
- 이파리가 2-노드이면 그 노드에 새 키를 삽입 종료
- 이파리가 3-노드이면 이 노드에 있는 2개의 키와 새 키를 비교하여 중간값이 되는 키를 부모로 올려 보내고, 남은 2개의 키를 각각 별도의 노드에 저장: 분리(Split) 연산

(3) 분리 연산
- 부모로 올려 보내진 키는 부모가 2-노드이면, 부모에 저장하고 삽입 연산 종료
- 부모가 3-노드이면 분리 연산 수행
- 위 과정은 루트까지 올라가면서 반복될 수 없다.
- 루트에서 노드 분리가 일어나면 2-3 트리의 높이 1 증가

(4) 삭제 연산
- 항상 이파리에서 삭제가 이루어진다.
- 만약 삭제할 키가 있는 노드가 이파리가 아니면 이진 탐색 트리의 삭제와 유사하게 중위 선행자 또는 중위 후속자와 교환한 후에 이파리에서 실질적인 삭제를 수행
- 이동(Transfer) 연산과 통합(Fusion) 연산 사용

(5) 이동 연산
- 키가 삭제되어 노드가 empty가 되면 이 노드의 형제와 부모의 도움을 받아 1개의 키를 empty 노드로 이동
- 형제는 반드시 3-노드이어야 한다.
- 3-노드가 empty 노드의 왼쪽(또는 오른쪽) 형제라면, 2개의 키 중에서 큰 키를 부모로 올려보내고 부모의 키를 empty 노드로 내려보낸다.

(6) 통합 연산
- 노드가 empty인데 이동 연산이 불가능한 경우
- Empty 노드와 그의 형제를 1개의 노드로 통합하고, empty 노드와 그의 형제의 분기점 역할을 하던 부모의 키를 통합된 노드로 끌어내려 저장
- 통합 연산과 분리 연산은 상호 역(Reverse) 연산 관계

2. 2-3 트리의 삭제 연산 알고리즘
(1) 삭제할 키 k가 있는 노드 x를 탐색
(2) if (x가 이파리이면), k를 노드 x에서 삭제. k를 삭제한 후 empty가 아니면 알고리즘 종료.
    만약 x가 empty인 경우, x의 형제 중에 3-노드가 있으면 이동 연산을 수행, 그렇지 않으면 통합 연산을 수행
(3) if(x가 이파리 노드가 아니면), k의 중위 선행자가 있는 노드 y와 중위 후속자가 있는 노드 z를 찾는다.
(4) if (y 또는 x에서 이동 연산이 가능하면), 이동 연산 가능한 키를 k와 서로 교환하고 이동 연산을 수행하며, 동시에 k를 삭제한 후에 알고리즘 종료
(5) if (y와 z 둘 다 이동 연산이 불가능하면), y나 z 중에서 임의로 하나를 선택하여 그 노드의 키를 k와 서로 교환한 후 k를 삭제하고, 통합 연산 수행

=> 통합 연산 수행 후 루트 방향으로 연속적인 통합 연산이 수행될 수 있다.

3. 수행 시간
(1) 2-3 트리의 탐색, 삽입, 삭제 연산은 각각 트리 높이에 비례하는 시간 소요
    - 각 연산은 루트부터 이파리까지 탐색하고, 삽입이나 삭제는 분리나 통합 연산을 수행하며 다시 루트까지 올라가는 경우도 있기 때문
(2) 개별적인 분리 연산이나 통합 연산은 각각 트리의 지역적인 부분에서만 수행되므로 O(1) 시간
(3) 2-3 트리가 가장 높은 경우는 모든 노드가 2-노드인 경우이고, 이때의 트리 높이 = log2(n+1)
(4) 트리의 모든 노드가 3-노드이면 트리의 높이가 최소이며, 높이는 log3n ≈ 0.63 log2n
(5) 2-3 트리의 탐색, 삽입, 삭제 연산의 수행 시간은 각각 O(log n)
(6) 2-3 트리는 이진 탐색 트리에 비해 매우 우수한 성능을 보이나, 2-3 트리를 실제로 구현하기 어려움
- 2개의 타입의 노드 정의
- 분리 및 통합 연산에서의 다양한 경우를 고려해야 한다.
- 3-노드에서는 키를 2회 비교하는 것도 고려해야 한다.

4. 2-3-4 트리
 -> 2-3 트리를 확장한 2-3-4 트리는 노드가 자식을 4개까지 가질 수 있는 완전 균형 트리
(1) 2-3-4 트리의 장점: 2-3 트리보다 높이가 낮아 그 만큼 빠른 탐색, 삽입, 삭제 연산 수행 가능
(2) 삽입과 삭제 연산: 이론적으로는 2-3 트리의 수행 시간과 통일한 O(log2n)

