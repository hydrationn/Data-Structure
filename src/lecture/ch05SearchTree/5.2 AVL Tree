5.2 AVL Tree
 트리가 한쪽으로 치우치는 것을 방지하여 트리 높이의 균형을 유지
- AVL 트리를 발명한 Adelson-Velskii와 Landis의 이름을 사용
- 균형(Balanced) 이진 트리: 탐색, 삽입, 삭제 연산의 수행 시간 O(log n) 보장

 [ 핵심 아이디어 ] AVL 트리는 삽입이나 삭제로 인해 균형이 어긋나면 회전 연산을 통해 트리의 균형을 유지한다.
 [ 정리 ] n개의 노드를 가진 AVL 트리의 높이는 O(log n)

* AVL 트리는 임의의 노드 x에 대해 x의 왼쪽 서브트리의 높이와 오른쪽 서브트리의 높이 차이가 1을 넘지 않는 이진 탐색 트리이다.

1. AVL 트리의 회전 연산
- AVL 트리에서 삽입 또는 삭제 연산을 수행할 때 트리의 균형을 유지하기 위해 LL-회전, RR-회전, LR-회전, RL-회전 연산 사용
- 회전 연산은 2개의 기본적인 연산으로 구현
    rotateLeft(), rotateRight()

2. 4종류 회전의 공통점
- 회전 후의 트리들이 모두 같음
- 각 회전 연산의 수행 시간 O(1)

(1) 삽입 연산
 [1단계] 이진 탐색 트리의 삽입과 동일하게 새 노드 삽입
 [2단계] 새 노드로부터 루트로 거슬러 올라가면 각 노드의 서브트리 높이 차이를 갱신
        - 이때 가장 먼저 불균형이 발생한 노드를 발견하면, 이 노드를 기준으로 새 노드가 어디에 삽입되었는지에 따라 적절한 회전 연산을 수행
(2) 삭제 연산
 [1단계] 이진 탐색 트리에서와 동일한 삭제 연산 수행
 [2단계] 삭제된 노드로부터 루트 방향으로 거슬러 올라가며 불균형이 발생한 경우 적절한 회전 연산 수행
        - 회전 연산 수행 후에 부모에서 불균형이 발생할 수 있고, 이러한 일이 반복되어 루트에서 회전 연산을 수행해야 하는 경우도 발생

 [ 핵심 아이디어 ] 삭제 후 불균형이 발생함녀 반대쪽에 삽입이 이루어져 불균형이 발생한 것으로 취급
 - p의 서브트리에서 삭제 일어남, gp에서 불균형 발생, p의 형제 = s
 - s의 왼쪽과 오른쪽 서브트리 중에서 높은 서브트리에 마치 새 노드를 삽입한 것으로 간주

3. 수행 시간
(1) AVL 트리에서의 탐색, 삽입, 삭제 연산은 공통적으로 루트부터 탐색을 시작하여 최악의 경우에 이파리까지 내려가고, 삽입이나 삭제 연산은 다시 루트까지 거슬러 올라가야 함
(2) 트리를 1층 내려갈 때는 순환 호출하며, 1층을 올라갈 때 불균형이 발생하면 적절한 회전 연산을 수행, 각각은 O(1) 시간
(3) 탐색, 삽입, 삭제 연산의 수행시간은 각각 AVL 트리의 높이에 비례: O(log N)

