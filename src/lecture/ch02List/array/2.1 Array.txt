2.1 Array
: 동일한 타입의 원소들이 연속적인 메모리 공간에 할당되어 각 항목이 하나의 원소에 저장되는 기본적인 자료구조
(1) 특정 원소에 접근할 때는 배열의 인덱스로 O(1) 시간에 접근
(2) 새 항목을 배열의 중간에 삽입하거나 중간에 있는 항목을 삭제하면, 뒤따르는 항목들으 1칸씩 뒤로 또는 앞으로 이동해야 하므로 O(n) 시간
(3) 레퍼런스 계산: a[i] = a + (원소의 크기) * i
-  char array: 2 bytes
- int array: 4 bytes

1. Overflow
 Array는 미리 정해진 크기의 메모리 공간을 할당받아 사용해야 하므로, 빈자리가 없으면 새 항목을 삽입할 수 없는 상황(Overflow) 발생
-> 배열에 overflow가 발생하면 배열 크기를 2배로 확장한다. 만일 배열의 3/4이 비어있으면 배열 크기를 1/2로 축소한다.

2. 수행시간
(1) peek(): 인덱스를 이용하여 배열 원소에 직접 접근, O(1) 시간
(2) 삽입/삭제: 새 항목을 중간에 삽입하거나 삭제한 후에 뒤따르는 항목들을 1칸씩 앞이나 뒤로 이동, O(n) 시간
(3) 맨 뒤에 새 항목 삽입: O(1) 시간
(4) 배열의 크기 확대/축소: O(n) 시간

3. java.util.methods for arrays
(1) Class java.util.Arrays and most commonly used built-in static methods
 equals(A, B), fill(A, x), copyOf(A, n), copyOfRange(A, s, t), toString(A), sort(A), binarySearch(A, x)
(2) java.util.Arrays.sort(A) or Arrays.sort(A) if Arrays class is imported

