3.2 Queue
: 삽입과 삭제가 양 끝에서 각각 수행되는 자료구조
- 일상생활의 관공서, 은행, 우체국, 병원 등에서 번호표를 이용한 줄서기
-> 선입선출(FIFO, Fist In First Out)

1. 배열로 구현한 큐에서 삽입과 삭제를 거듭하게 되면
(1) 항목 이동 해결 방안
 [방법 1] 큐의 항목들을 배열의 앞부분으로 이동 -> 수행시간이 큐의 항목 수에 비례
 [방법 2] 배열을 원형으로, 즉, 배열의 마지막 원소가 첫 원소와 맞닿아 있다고 여김(원형 배열)

(2) 큐가 empty일 때 문제 해결 방안
 front를 실제의 맨 앞에 있는 항목의 바로 앞의 비어있는 원소를 가리키게
   -> 배열 크기가 n일 때, n-1개의 원소만 사용

2. A Queue by a Circularly linked list
- Where to insert?
- Where to delete?

3. 큐 자료구조의 응용
- CPU의 태스크 스케줄링(Task Scheduling)
- 네트워크 프린터
- 실시간(Real-time) 시스템의 인터럽트(Interrupt) 처리
- 다양한 이벤트 구동 방식(Event-driven) 컴퓨터 시뮬레이션
- 콜 센터의 전화 서비스 처리 등
- Part 4의 이진 트리의 레벨 순회(Level-order Traversal)
- Part 9 그래프에서 너비 우선 탐색(Breath-First Search) 등

4. 수행 시간
(1) 배열 큐의 add와 remove 연산: O(1) 시간
(2) 배열 크기를 확대/축소시키는 경우: O(n) 시간
(3) 단순 연결 리스트 큐의 add와 remove 연산: O(1) 시간
(4) 배열과 단순 연결 리스트로 구현한 큐의 장단점은 리스트를 배열과 단순 연결 리스트로 구현하였을 때의 장단점과 동일
